# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: unity-api
  namespace: api-database
  labels:
    app: api
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        component: backend
    spec:
      containers:
      - name: api
        image: api:latest
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: LOG_LEVEL
          value: "info"
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: mongo_uri
        - name: KAFKA_BROKERS
          value: "kafka-service:9092"
        - name: ALLOWED_ORIGINS
          value: "https://yourdomain.com,https://api.yourdomain.com"
        - name: RATE_LIMIT_WINDOW_MS
          value: "900000"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      restartPolicy: Always
---
# API Service (Internal)
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: api-database
  labels:
    app: api
    component: backend
    service: api-internal
  annotations:
    description: "Internal API service for cluster communication"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/health/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: api
---
# API Service (External)
apiVersion: v1
kind: Service
metadata:
  name: api-external
  namespace: api-database
  labels:
    app: api
    component: backend
    service: api-external
  annotations:
    description: "External API service for public access"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/health/metrics"
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30300
    protocol: TCP
    name: http
  selector:
    app: api
---
# API ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  namespace: api-database
  labels:
    app: api
    component: backend
data:
  NODE_ENV: "production"
  PORT: "3000"
  LOG_LEVEL: "info"
  ALLOWED_ORIGINS: "https://yourdomain.com,https://api.yourdomain.com"
  RATE_LIMIT_WINDOW_MS: "900000"
  RATE_LIMIT_MAX_REQUESTS: "100"
  KAFKA_BROKERS: "kafka-service:9092"
---
# API Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-hpa
  namespace: api-database
  labels:
    app: api
    component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
# API Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-pdb
  namespace: api-database
  labels:
    app: api
    component: backend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: api


